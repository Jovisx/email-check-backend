AWSTemplateFormatVersion: '2010-09-09'
Description: 'This is a simple backend for email check service'
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'
    Environment:
      Variables:
        APP_POOL_ID: us-east-2_Ftx1Jyxt5
        APP_CLIENT_ID: 312ejpdvobaa9h2jc0ksdemijo
        EMAIL_POOL_TABLE: !Ref EmailPool
        PROCESS_POOL_TABLE: !Ref ProcessPool

Parameters:
  AppId:
    Type: String
    Default: 'email-check-backend'

Resources:
  # This is a Lambda function config associated with the source code: register.js
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/cognito/register.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Events:
        HttpEvent:
          Type: Api
          Properties:
            Path: /auth/register
            Method: post
            cors: true

  # This is a Lambda function config associated with the source code: auto-confirm.js
  AutoConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/cognito/auto-confirm.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Events:
        HttpEvent:
          Type: Api
          Properties:
            Path: /auth/auto-confirm
            Method: post
            cors: true

  # This is a Lambda function config associated with the source code: login.js
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/cognito/login.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Events:
        HttpEvent:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
            cors: true
  
  # This is a Lambda function config associated with the source code: login.js
  DetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/cognito/detail.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Events:
        HttpEvent:
          Type: Api
          Properties:
            Path: /auth/detail
            Method: get
            cors: true

  # This is a Lambda function config associated with the source code: get-emails.js
  GetEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/admin/get-emails.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A HTTP get method to get emails from a DynamoDB email pool table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/list
            Method: GET
            cors: true

  # This is a Lambda function config associated with the source code: move-email.js
  MoveEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/admin/move-email.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A HTTP post method to move emails from email pool to process pool.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/move
            Method: POST
            cors: true

  # This is a Lambda function config associated with the source code: get-by-id.js
  GetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/email-pool/get-by-id.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A HTTP get method to get one email by id from a DynamoDB email pool table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /email-pool/{id}
            Method: GET
            cors: true

  # This is a Lambda function config associated with the source code: add-emails.js
  AddEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/email-pool/add-emails.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A HTTP post method to add emails to a DynamoDB table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /email-pool/add
            Method: POST
            cors: true

  # This is a Lambda function config associated with the source code: process-email.js
  ProcessEmailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/process-pool/process-email.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A HTTP post method to process an email in DynamoDB table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /process-pool/process
            Method: POST
            cors: true
  
  # This is a Lambda function config associated with the source code: assign-email.js
  AssignEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/process-pool/assign-email.lambdaHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A HTTP post method to assign an email into user in DynamoDB table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /process-pool/assign
            Method: GET
            cors: true

  # DynamoDB table to store emails
  EmailPool:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'EmailPool'
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # DynamoDB table to process email
  ProcessPool:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'ProcessPool'
      AttributeDefinitions:
        -
          AttributeName: emailId
          AttributeType: S
        -
          AttributeName: createdAt
          AttributeType: N
      KeySchema:
        -
          AttributeName: emailId
          KeyType: HASH
        -
          AttributeName: createdAt
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2